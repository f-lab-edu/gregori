plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.apache.commons:commons-lang3:3.14.0'

    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2")
    implementation 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/auth/**",
                "**/common/**",
                "**/config/**",
                "**/mypage/**",
                "**/refresh_token/**",
                "**/GregoriApplication.class"
            ])
        }))
    }

    reports {
        xml.required = true
        csv.required = true
        html.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.6
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                maximum = 0.6
            }

            excludes = [
                "**/auth/**",
                "**/common/**",
                "**/config/**",
                "**/mypage/**",
                "**/refresh_token/**",
                "**/GregoriApplication.class"
            ]
        }
    }
}
